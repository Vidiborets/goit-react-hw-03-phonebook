{"version":3,"sources":["components/ContactFilter/ContactFilter.module.scss","App.module.scss","components/Container/Container.module.scss","components/ContactList/ContactList.module.scss","components/Section/Section.module.scss","components/ContactForm/ContactForm.module.scss","components/ContactItem/ContactItem.module.scss","components/Container/Container.jsx","components/ContactForm/ContactForm.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","components/ContactFilter/ContactFilter.jsx","components/Section/Section.jsx","App.js","index.js"],"names":["module","exports","Container","children","className","s","container","defaultProps","protoTypes","PropTypes","node","ContactForm","state","contacts","name","number","handleChange","e","currentTarget","value","setState","handleSubmit","preventDefault","contact","id","shortid","generate","prevState","props","onSubmit","reset","form","this","type","onChange","input","placeholder","pattern","title","required","button","Component","ContactItem","renderId","itemList","contactName","contactNumber","href","contactDelete","onClick","ContactList","list","map","ContactFilter","label","Section","section","App","filter","formSubmit","newContact","find","alert","console","log","getVisibleContacts","normalizeFilter","toLowerCase","includes","changeFilter","localStorage","getItem","parsedContacts","JSON","parse","prevProps","setItem","stringify","setContact","titleContact","ReactDOM","render","StrictMode","document","querySelector"],"mappings":"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","file":"static/js/main.175e3cd2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"ContactFilter_label__2XO6r\",\"input\":\"ContactFilter_input__8Aypf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"App_title__2oBiX\",\"titleContact\":\"App_titleContact__1tdh3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__3eZVY\",\"title\":\"Container_title__58Tg5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__3wSXY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__2mYr1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1NiH1\",\"input\":\"ContactForm_input__3emgF\",\"button\":\"ContactForm_button__1007G\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"itemList\":\"ContactItem_itemList__2TKF7\",\"contactName\":\"ContactItem_contactName__ak6z3\",\"contactNumber\":\"ContactItem_contactNumber__4z14B\",\"contactDelete\":\"ContactItem_contactDelete__1eCr1\"};","\n\nimport PropTypes from 'prop-types';\nimport s from './Container.module.scss';\n\nconst Container = ({ children }) => (\n  <div className={s.container}>{children}</div>\n);\n\nContainer.defaultProps = {\n  children: [],\n};\n\nContainer.protoTypes = {\n  children: PropTypes.node,\n};\n\nexport default Container;\n","import React, { Component } from \"react\";\nimport shortid from 'shortid'\nimport PropTypes from 'prop-types';\nimport s from './ContactForm.module.scss'\n\nclass ContactForm extends Component{\n    static propTypes = {\n        onSubmit: PropTypes.func.isRequired,\n    };\n\n    state = {\n        contacts: [],\n        name: '',\n        number:''\n    };\n      handleChange = (e) => {\n        const { name, value } = e.currentTarget;\n\n        this.setState({\n            [name]: value\n        })\n    }\n    handleSubmit = (e) => {\n        e.preventDefault()\n\n        const contact = {\n            id: shortid.generate(),\n            name: this.state.name,\n            number:this.state.number\n        }\n\n        this.setState(prevState => ({\n            contacts:[contact,...prevState.contacts]\n        }))\n\n        this.props.onSubmit(contact)\n        this.reset()\n    }\n    reset = () => {\n        this.setState({\n            contacts:[],\n            name: '',\n            number:''\n        })\n    }\n\n    render() {\n        return (\n            <form className={s.form} onSubmit={this.handleSubmit}>\n                <label>\n                    <input\n                        type=\"text\"\n                        name=\"name\"\n                        value={this.state.name}\n                        onChange={this.handleChange}\n                        className={s.input}\n                        placeholder={'Имя'}\n                         pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n                        required\n                        />\n                </label>\n                <label>\n                    <input\n                        type=\"tel\"\n                        name=\"number\"\n                        value={this.state.number}\n                        onChange={this.handleChange}\n                        className={s.input}\n                        placeholder={'Номер'}\n                        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                        required\n                        />\n                </label>\n                <button className={s.button} type=\"submit\">Добавить контакт</button>\n            </form>\n            \n        );\n    }\n}\n\nexport default ContactForm","import s from './ContactItem.module.scss'\n\nconst ContactItem =({contact,renderId})=> {\n    return (\n        <li className={s.itemList}>\n            <span className={s.contactName}>{contact.name}</span>\n            <a className={s.contactNumber} href={`tel:${contact.number}`}>{contact.number}</a>\n            <button className={s.contactDelete} type=\"button\" onClick={() => renderId(contact.id)}>Удалить</button>\n        </li>\n    )\n}\n\n\nexport default ContactItem","import ContactItem from \"../ContactItem\";\nimport PropTypes from 'prop-types'\nimport s from './ContactList.module.scss'\n\nconst ContactList = ({ contacts, renderId }) => {\n    return (\n        <ul className={s.list}>\n            {contacts.map(contact => (\n                <ContactItem\n                    contact={contact}\n                    renderId={renderId}\n                    key={contact.id}\n                />\n            ))}\n       </ul>\n  )  \n}\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n  renderId: PropTypes.func.isRequired,\n};\n\nexport default ContactList","import PropTypes from 'prop-types'\nimport s from './ContactFilter.module.scss'\n\nconst ContactFilter = ({ value, onChange }) => {\n    return (\n        <label className={s.label}>\n            <input\n                type=\"text\"\n                name=\"name\"\n                value={value}\n                onChange={onChange}\n                className={s.input}\n                placeholder={'Поиск контактов'}\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n                required\n            />\n        </label>\n    )\n}\n\nContactFilter.defaultProps = {\n  value: '',\n};\n\nContactFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default ContactFilter","import PropTypes from 'prop-types';\nimport s from './Section.module.scss';\n\nconst Section = ({ children }) => (\n  <div className={s.section}>{children}</div>\n);\n\nSection.defaultProps = {\n  children: [],\n};\n\nSection.protoTypes = {\n  children: PropTypes.node,\n};\n\nexport default Section;","import { Component } from 'react'\nimport Container from './components/Container'\nimport ContactForm from './components/ContactForm'\nimport ContactList from './components/ContactList'\nimport ContactFilter from './components/ContactFilter'\nimport Section from './components/Section'\nimport s from './App.module.scss'\n\nclass App extends Component {\n    state = {\n        contacts: [\n            { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n            {id: 'id-2', name: 'Hermione Kline', number: '443-89-12'},\n            {id: 'id-3', name: 'Eden Clements', number: '645-17-79'},\n            {id: 'id-4', name: 'Annie Copeland', number: '227-91-26'},],\n        name: '',\n        filter:'',\n    };\n\n    formSubmit = newContact => {\n         const duplicateName = this.state.contacts.find(\n            contact => contact.name === newContact.name,\n         );\n        \n         if (duplicateName) {\n             alert(`${newContact.name} is already on contacts`);\n            return;\n         }\n      \n        this.setState(({ contacts }) => ({\n            contacts: [newContact, ...contacts],\n        }));\n        console.log(newContact)\n    }\n\n    renderId = (id) => {\n        this.setState(prevState => ({\n            contacts: prevState.contacts.filter(contact => contact.id !== id),\n        }))\n    }\n\n    getVisibleContacts = () => {\n        const { contacts, filter } = this.state;\n        \n        const normalizeFilter = filter.toLowerCase();\n\n        return contacts.filter(contact =>\n        contact.name.toLowerCase().includes(normalizeFilter),\n        );\n    };\n\n    changeFilter = (e) => {\n        this.setState({ filter: e.currentTarget.value })  \n    }\n\n    componentDidMount() {\n        const contacts = localStorage.getItem('contacts')\n        const parsedContacts = JSON.parse(contacts);\n\n        if (parsedContacts) {\n            this.setState({contacts:parsedContacts})\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        const nextContacts = this.state.contacts;\n        const prevContacts = prevState.contacts;\n        if (nextContacts !== prevContacts) {\n            localStorage.setItem('contacts', JSON.stringify(this.state.contacts))\n        }\n    }\n\n\n\n\n\n    render() {\n        const { filter } = this.state;\n        const setContact = this.getVisibleContacts()\n        return (\n            <Container>\n                <Section>\n                    <h1 className={s.title}>Телефонная книга</h1>\n                    <ContactForm onSubmit={this.formSubmit}/>\n                    <h1 className={s.titleContact}>Контакты</h1>\n                    <ContactFilter value={filter} onChange={this.changeFilter}/>\n                    <ContactList contacts={setContact} renderId={this.renderId}/>\n                </Section>\n            </Container>\n        )\n    }\n}\n\nexport default App\n\n\n\n\n\n\n\n\n\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.querySelector('#root'),\n);\n\n"],"sourceRoot":""}